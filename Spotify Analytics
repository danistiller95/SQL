# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert the Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
);

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#How many tracks does each artist have?
SELECT 
count (artist_name) AS num_of_tracks,
artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY num_of_tracks desc;

#What are the top 5 most popular tracks?
SELECT 
artist_name,
track_name,
popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 5;

#What are the 5 shortest songs?
SELECT 
artist_name,
track_name,
duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms
LIMIT 5;

#Which songs have danceability and energy ratings greater than the average?
SELECT 
artist_name,
track_name,
danceability,
energy
FROM BIT_DB.Spotifydata
WHERE danceability > (SELECT AVG(danceability) FROM BIT_DB.Spotifydata)
AND energy > (SELECT AVG(energy) FROM BIT_DB.Spotifydata);

#Which songs have a tempo that is less than 100?
SELECT 
artist_name,
track_name,
tempo
FROM BIT_DB.Spotifydata
WHERE tempo <100 
ORDER BY tempo desc;

#Which songs include the word "your" in the track name?
SELECT 
artist_name,
track_name
FROM BIT_DB.Spotifydata
WHERE track_name LIKE '%your%';

#Which songs have less than the average speechiness?
SELECT 
artist_name,
track_name,
speechiness
FROM BIT_DB.Spotifydata
WHERE speechiness < (SELECT AVG(speechiness) FROM BIT_DB.Spotifydata)
ORDER by speechiness desc; 

#What song has the minimum loudness?
SELECT 
artist_name,
track_name,
MIN(loudness) AS loudness
FROM BIT_DB.Spotifydata;

#Which songs contain a track_id that includes the letter "x"?
SELECT 
artist_name,
track_name
FROM BIT_DB.Spotifydata
WHERE track_id IN (SELECT track_id WHERE track_id like '%x%');
